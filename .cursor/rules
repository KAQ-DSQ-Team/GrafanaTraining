# Grafana Training Project - Cursor Rules

## 프로젝트 개요
이 프로젝트는 실측 센서 시계열 데이터를 SQLite에 저장하고 Grafana로 시각화하는 학습용 프로젝트입니다.

## 기술 스택
- **데이터베이스**: SQLite
- **시각화**: Grafana
- **컨테이너**: Docker & Docker Compose
- **데이터 생성**: Python
- **설정 관리**: YAML, JSON

## 코딩 규칙

### Python 코드
- Python 3.7+ 호환성 유지
- 클래스 기반 구조 사용 (SensorDataGenerator 등)
- 명확한 docstring 작성
- 예외 처리 포함
- 로깅 및 진행상황 출력 포함

### Docker 설정
- docker-compose.yml 사용
- 환경변수 설정 포함
- 볼륨 마운트 설정
- 네트워크 구성

### Grafana 설정
- Provisioning 방식 사용
- 데이터소스 자동 설정
- 대시보드 JSON 형식
- SQLite 플러그인 지원

### 파일 구조
```
GrafanaTraining/
├── docker-compose.yml          # Grafana Docker 설정
├── data/                       # 데이터 파일들
│   ├── metrics.db             # SQLite 데이터베이스
│   └── sensor_data.py         # 센서 데이터 생성 스크립트
├── grafana/                    # Grafana 설정 파일들
│   └── provisioning/          # 대시보드 및 데이터소스 설정
└── README.md                  # 프로젝트 문서
```

## 개발 가이드라인

### 1. 데이터 생성
- 현실적인 센서 데이터 범위 사용
- 시계열 데이터 형식 준수
- 다양한 센서 타입 지원 (온도, 압력, 습도, 유량)

### 2. 시각화 패널
- Stat Panel: 평균값 표시
- Time-series Panel: 시계열 추이
- Threshold 설정: 경고/위험 기준
- 적절한 단위 설정

### 3. 확장성 고려
- 모듈화된 구조
- 설정 파일 분리
- 플러그인 호환성
- 커스텀 패널 개발 준비

## 커밋 규칙

### 커밋 메시지 형식
- feat: 새로운 기능 추가
- fix: 버그 수정
- docs: 문서 수정
- style: 코드 스타일 변경
- refactor: 코드 리팩토링
- test: 테스트 추가/수정
- chore: 빌드 프로세스 또는 보조 도구 변경

### 커밋 작업 프로세스
1. **변경사항 확인**
   - `git status`와 `git diff`를 통해 변경사항 확인
   - GitHub Issues 확인

2. **커밋 준비**
   - 변경된 파일이 많을 경우 분리해서 순차적으로 커밋 진행
   - GitHub Issues에 해당 커밋에 대한 내용 기록
   - 특히 주석에 AC(Acceptance Criteria)에 적혀있는 해당 작업이 끝났음을 증명할 수 있는 증거자료 남김

3. **커밋 실행**
   - `git add`를 통해 변경사항 추가
   - `git commit -m "<message>"`를 통해 커밋 (이슈 번호 포함)
   - **절대 git hook에서 수행하는 검증을 건너뛰지 않음** ('--no-verify' 옵션 사용 금지)

4. **푸시**
   - `git push`를 통해 변경사항을 원격 저장소에 푸시

## 주의사항
- SQLite 데이터베이스 파일은 .gitignore에 포함
- 민감한 정보는 환경변수로 관리
- Docker 컨테이너 보안 설정 고려
- Grafana 플러그인 호환성 확인

## 학습 목표
1. 시계열 데이터 시각화 기본 학습
2. Grafana 대시보드 구성 실습
3. SQLite 데이터소스 연결 방법
4. 향후 품질관리/공정실험 확장 기반 마련 